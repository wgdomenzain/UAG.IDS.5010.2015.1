Sources\main.o:     file format elf32-littlearmSources\main.oarchitecture: arm, flags 0x00000011:HAS_RELOC, HAS_SYMSstart address 0x00000000private flags = 5000000: [Version5 EABI]Sections:Idx Name          Size      VMA       LMA       File off  Algn  0 .text         00000000  00000000  00000000  00000034  2**1                  CONTENTS, ALLOC, LOAD, READONLY, CODE  1 .data         00000000  00000000  00000000  00000034  2**0                  CONTENTS, ALLOC, LOAD, DATA  2 .bss          00000000  00000000  00000000  00000034  2**0                  ALLOC  3 .rodata.InitializeLCD 00000008  00000000  00000000  00000034  2**2                  CONTENTS, ALLOC, LOAD, READONLY, DATA  4 .text.main    00000024  00000000  00000000  0000003c  2**2                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE  5 .text.cfgPorts 000000a4  00000000  00000000  00000060  2**2                  CONTENTS, ALLOC, LOAD, READONLY, CODE  6 .text.initLCD 00000040  00000000  00000000  00000104  2**2                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE  7 .text.printPuppet 00000088  00000000  00000000  00000144  2**2                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE  8 .text.printText 00000048  00000000  00000000  000001cc  2**2                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE  9 .text.centerText 00000054  00000000  00000000  00000214  2**2                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE 10 .text.sendCode 000000b0  00000000  00000000  00000268  2**2                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE 11 .text.delay   0000001c  00000000  00000000  00000318  2**2                  CONTENTS, ALLOC, LOAD, READONLY, CODE 12 .debug_info   00000574  00000000  00000000  00000334  2**0                  CONTENTS, RELOC, READONLY, DEBUGGING 13 .debug_abbrev 00000166  00000000  00000000  000008a8  2**0                  CONTENTS, READONLY, DEBUGGING 14 .debug_loc    0000019c  00000000  00000000  00000a0e  2**0                  CONTENTS, RELOC, READONLY, DEBUGGING 15 .debug_aranges 00000058  00000000  00000000  00000baa  2**0                  CONTENTS, RELOC, READONLY, DEBUGGING 16 .debug_macinfo 00026630  00000000  00000000  00000c02  2**0                  CONTENTS, READONLY, DEBUGGING 17 .debug_line   000002be  00000000  00000000  00027232  2**0                  CONTENTS, RELOC, READONLY, DEBUGGING 18 .debug_str    0000030c  00000000  00000000  000274f0  2**0                  CONTENTS, READONLY, DEBUGGING 19 .comment      0000007a  00000000  00000000  000277fc  2**0                  CONTENTS, READONLY 20 .ARM.attributes 00000031  00000000  00000000  00027876  2**0                  CONTENTS, READONLY 21 .debug_frame  00000104  00000000  00000000  000278a8  2**2                  CONTENTS, RELOC, READONLY, DEBUGGINGSYMBOL TABLE:00000000 l    df *ABS*	00000000 main.c00000000 l    d  .text	00000000 .text00000000 l    d  .data	00000000 .data00000000 l    d  .bss	00000000 .bss00000000 l    d  .rodata.InitializeLCD	00000000 .rodata.InitializeLCD00000000 l    d  .text.main	00000000 .text.main00000000 l    d  .text.cfgPorts	00000000 .text.cfgPorts00000000 l    d  .text.initLCD	00000000 .text.initLCD00000000 l    d  .text.printPuppet	00000000 .text.printPuppet00000000 l    d  .text.printText	00000000 .text.printText00000000 l    d  .text.centerText	00000000 .text.centerText00000000 l    d  .text.sendCode	00000000 .text.sendCode00000000 l    d  .text.delay	00000000 .text.delay00000000 l    d  .debug_info	00000000 .debug_info00000000 l    d  .debug_abbrev	00000000 .debug_abbrev00000000 l    d  .debug_loc	00000000 .debug_loc00000000 l    d  .debug_aranges	00000000 .debug_aranges00000000 l    d  .debug_macinfo	00000000 .debug_macinfo00000000 l    d  .debug_line	00000000 .debug_line00000000 l    d  .debug_str	00000000 .debug_str00000000 l    d  .debug_frame	00000000 .debug_frame00000000 l    d  .comment	00000000 .comment00000000 l    d  .ARM.attributes	00000000 .ARM.attributes00000004       O *COM*	00000004 int_Temp00000000 g     O .rodata.InitializeLCD	00000005 InitializeLCD00000000 g     F .text.main	00000022 main00000000 g     F .text.cfgPorts	000000a4 cfgPorts00000000 g     F .text.initLCD	00000040 initLCD00000000 g     F .text.printPuppet	00000088 printPuppet00000000 g     F .text.sendCode	000000b0 sendCode00000000 g     F .text.delay	0000001c delay00000000 g     F .text.printText	00000046 printText00000000 g     F .text.centerText	00000052 centerTextDisassembly of section .text.main:00000000 <main>:/*@description: Initial Port Cfg */			int main(void){   0:	b580      	push	{r7, lr}   2:	af00      	add	r7, sp, #0	//Configure ports	cfgPorts();   4:	f7ff fffe 	bl	0 <main>			4: R_ARM_THM_CALL	cfgPorts	//Initialize LCD	initLCD();   8:	f7ff fffe 	bl	0 <main>			8: R_ARM_THM_CALL	initLCD	//Print character	//char myName[] = {"Mariel"};	//printText(0xC0, myName);	//centerText(lowerRow, myName);		printPuppet();   c:	f7ff fffe 	bl	0 <main>			c: R_ARM_THM_CALL	printPuppet		sendCode(nIns, 0x80);  10:	2000      	movs	r0, #0  12:	2180      	movs	r1, #128	; 0x80  14:	f7ff fffe 	bl	0 <main>			14: R_ARM_THM_CALL	sendCode		sendCode(nData, 0x00);  18:	2001      	movs	r0, #1  1a:	2100      	movs	r1, #0  1c:	f7ff fffe 	bl	0 <main>			1c: R_ARM_THM_CALL	sendCode		}		else if ((GPIOC_PDIR && 0x0F) == 0x0F) 		{// Buttons 1&2&3&4 have been pressed					}*/	}  20:	e7fe      	b.n	20 <main+0x20>  22:	46c0      	nop			; (mov r8, r8)Disassembly of section .text.cfgPorts:00000000 <cfgPorts>:		return 0;}void cfgPorts(void){   0:	b580      	push	{r7, lr}   2:	af00      	add	r7, sp, #0	//Turn on clock for portb	SIM_SCGC5 = SIM_SCGC5_PORTB_MASK;	   4:	4a21      	ldr	r2, [pc, #132]	; (8c <cfgPorts+0x8c>)   6:	4b22      	ldr	r3, [pc, #136]	; (90 <cfgPorts+0x90>)   8:	2180      	movs	r1, #128	; 0x80   a:	00c9      	lsls	r1, r1, #3   c:	50d1      	str	r1, [r2, r3]	//Turn on clock for portd	//SIM_SCGC5 |= SIM_SCGC5_PORTD_MASK;		////Turn on clock for portc	SIM_SCGC5 |= SIM_SCGC5_PORTC_MASK;   e:	4a1f      	ldr	r2, [pc, #124]	; (8c <cfgPorts+0x8c>)  10:	491e      	ldr	r1, [pc, #120]	; (8c <cfgPorts+0x8c>)  12:	4b1f      	ldr	r3, [pc, #124]	; (90 <cfgPorts+0x90>)  14:	58cb      	ldr	r3, [r1, r3]  16:	2180      	movs	r1, #128	; 0x80  18:	0109      	lsls	r1, r1, #4  1a:	4319      	orrs	r1, r3  1c:	4b1c      	ldr	r3, [pc, #112]	; (90 <cfgPorts+0x90>)  1e:	50d1      	str	r1, [r2, r3]		/* Set pins of PORTB as GPIO */	PORTC_PCR0 = PORT_PCR_MUX(1);  20:	4b1c      	ldr	r3, [pc, #112]	; (94 <cfgPorts+0x94>)  22:	2280      	movs	r2, #128	; 0x80  24:	0052      	lsls	r2, r2, #1  26:	601a      	str	r2, [r3, #0]	PORTC_PCR1 = PORT_PCR_MUX(1);  28:	4b1a      	ldr	r3, [pc, #104]	; (94 <cfgPorts+0x94>)  2a:	2280      	movs	r2, #128	; 0x80  2c:	0052      	lsls	r2, r2, #1  2e:	605a      	str	r2, [r3, #4]	PORTC_PCR2 = PORT_PCR_MUX(1);  30:	4b18      	ldr	r3, [pc, #96]	; (94 <cfgPorts+0x94>)  32:	2280      	movs	r2, #128	; 0x80  34:	0052      	lsls	r2, r2, #1  36:	609a      	str	r2, [r3, #8]	PORTC_PCR3 = PORT_PCR_MUX(1);  38:	4b16      	ldr	r3, [pc, #88]	; (94 <cfgPorts+0x94>)  3a:	2280      	movs	r2, #128	; 0x80  3c:	0052      	lsls	r2, r2, #1  3e:	60da      	str	r2, [r3, #12]	PORTC_PCR4 = PORT_PCR_MUX(1);  40:	4b14      	ldr	r3, [pc, #80]	; (94 <cfgPorts+0x94>)  42:	2280      	movs	r2, #128	; 0x80  44:	0052      	lsls	r2, r2, #1  46:	611a      	str	r2, [r3, #16]	PORTC_PCR5 = PORT_PCR_MUX(1);  48:	4b12      	ldr	r3, [pc, #72]	; (94 <cfgPorts+0x94>)  4a:	2280      	movs	r2, #128	; 0x80  4c:	0052      	lsls	r2, r2, #1  4e:	615a      	str	r2, [r3, #20]	PORTC_PCR6 = PORT_PCR_MUX(1);  50:	4b10      	ldr	r3, [pc, #64]	; (94 <cfgPorts+0x94>)  52:	2280      	movs	r2, #128	; 0x80  54:	0052      	lsls	r2, r2, #1  56:	619a      	str	r2, [r3, #24]	PORTC_PCR7 = PORT_PCR_MUX(1);  58:	4b0e      	ldr	r3, [pc, #56]	; (94 <cfgPorts+0x94>)  5a:	2280      	movs	r2, #128	; 0x80  5c:	0052      	lsls	r2, r2, #1  5e:	61da      	str	r2, [r3, #28]		/* Set pins of PORTC as GPIO */	PORTB_PCR0= PORT_PCR_MUX(1);  60:	4b0d      	ldr	r3, [pc, #52]	; (98 <cfgPorts+0x98>)  62:	2280      	movs	r2, #128	; 0x80  64:	0052      	lsls	r2, r2, #1  66:	601a      	str	r2, [r3, #0]	PORTB_PCR1= PORT_PCR_MUX(1);  68:	4b0b      	ldr	r3, [pc, #44]	; (98 <cfgPorts+0x98>)  6a:	2280      	movs	r2, #128	; 0x80  6c:	0052      	lsls	r2, r2, #1  6e:	605a      	str	r2, [r3, #4]	PORTD_PCR5=(0|PORT_PCR_MUX(1));	PORTD_PCR6=(0|PORT_PCR_MUX(1));	PORTD_PCR7=(0|PORT_PCR_MUX(1));*/		//Initialize PortB	GPIOB_PDOR = 0x00;  70:	4b0a      	ldr	r3, [pc, #40]	; (9c <cfgPorts+0x9c>)  72:	2200      	movs	r2, #0  74:	601a      	str	r2, [r3, #0]		//Initialize PortC	GPIOC_PDOR = 0x00;  76:	4b0a      	ldr	r3, [pc, #40]	; (a0 <cfgPorts+0xa0>)  78:	2200      	movs	r2, #0  7a:	601a      	str	r2, [r3, #0]	//Configure PortB as outputs	GPIOB_PDDR = 0xFF;  7c:	4b07      	ldr	r3, [pc, #28]	; (9c <cfgPorts+0x9c>)  7e:	22ff      	movs	r2, #255	; 0xff  80:	615a      	str	r2, [r3, #20]		//Configure PortD as outputs	//GPIOD_PDDR = 0xFF;		//Configure PortC as outputs	GPIOC_PDDR = 0xFF;  82:	4b07      	ldr	r3, [pc, #28]	; (a0 <cfgPorts+0xa0>)  84:	22ff      	movs	r2, #255	; 0xff  86:	615a      	str	r2, [r3, #20]}  88:	46bd      	mov	sp, r7  8a:	bd80      	pop	{r7, pc}  8c:	40047000 	.word	0x40047000  90:	00001038 	.word	0x00001038  94:	4004b000 	.word	0x4004b000  98:	4004a000 	.word	0x4004a000  9c:	400ff040 	.word	0x400ff040  a0:	400ff080 	.word	0x400ff080Disassembly of section .text.initLCD:00000000 <initLCD>:void initLCD(void){   0:	b082b580 	.word	0xb082b580   4:	af00      	add	r7, sp, #0	int i;	delay(nt15_msec);   6:	4b0c      	ldr	r3, [pc, #48]	; (38 <initLCD+0x38>)   8:	1c18      	adds	r0, r3, #0   a:	f7ff fffe 	bl	0 <initLCD>			a: R_ARM_THM_CALL	delay		/* Send initialization instructions */	/* Loop for sending each character from the array */	for(i=0;i<5;i++)   e:	2300      	movs	r3, #0  10:	607b      	str	r3, [r7, #4]  12:	e00a      	b.n	2a <initLCD+0x2a>	{												sendCode(nIns, InitializeLCD[i]);	/* send initialization instructions */  14:	4a09      	ldr	r2, [pc, #36]	; (3c <initLCD+0x3c>)  16:	687b      	ldr	r3, [r7, #4]  18:	18d3      	adds	r3, r2, r3  1a:	781b      	ldrb	r3, [r3, #0]  1c:	2000      	movs	r0, #0  1e:	1c19      	adds	r1, r3, #0  20:	f7ff fffe 	bl	0 <initLCD>			20: R_ARM_THM_CALL	sendCode	int i;	delay(nt15_msec);		/* Send initialization instructions */	/* Loop for sending each character from the array */	for(i=0;i<5;i++)  24:	687b      	ldr	r3, [r7, #4]  26:	3301      	adds	r3, #1  28:	607b      	str	r3, [r7, #4]  2a:	687b      	ldr	r3, [r7, #4]  2c:	2b04      	cmp	r3, #4  2e:	ddf1      	ble.n	14 <initLCD+0x14>	{												sendCode(nIns, InitializeLCD[i]);	/* send initialization instructions */	}	}  30:	46bd      	mov	sp, r7  32:	b002      	add	sp, #8  34:	bd80      	pop	{r7, pc}  36:	46c0      	nop			; (mov r8, r8)  38:	00002710 	.word	0x00002710  3c:	00000000 	.word	0x00000000			3c: R_ARM_ABS32	InitializeLCDDisassembly of section .text.printPuppet:00000000 <printPuppet>:void printPuppet(void){   0:	b580      	push	{r7, lr}   2:	af00      	add	r7, sp, #0		sendCode(nIns,0x40);   4:	2000      	movs	r0, #0   6:	2140      	movs	r1, #64	; 0x40   8:	f7ff fffe 	bl	0 <printPuppet>			8: R_ARM_THM_CALL	sendCode	sendCode(nData,0x0E);   c:	2001      	movs	r0, #1   e:	210e      	movs	r1, #14  10:	f7ff fffe 	bl	0 <printPuppet>			10: R_ARM_THM_CALL	sendCode	sendCode(nIns,0x41);  14:	2000      	movs	r0, #0  16:	2141      	movs	r1, #65	; 0x41  18:	f7ff fffe 	bl	0 <printPuppet>			18: R_ARM_THM_CALL	sendCode	sendCode(nData,0x0E);  1c:	2001      	movs	r0, #1  1e:	210e      	movs	r1, #14  20:	f7ff fffe 	bl	0 <printPuppet>			20: R_ARM_THM_CALL	sendCode	sendCode(nIns,0x42);  24:	2000      	movs	r0, #0  26:	2142      	movs	r1, #66	; 0x42  28:	f7ff fffe 	bl	0 <printPuppet>			28: R_ARM_THM_CALL	sendCode	sendCode(nData,0x0E);  2c:	2001      	movs	r0, #1  2e:	210e      	movs	r1, #14  30:	f7ff fffe 	bl	0 <printPuppet>			30: R_ARM_THM_CALL	sendCode	sendCode(nIns,0x43);  34:	2000      	movs	r0, #0  36:	2143      	movs	r1, #67	; 0x43  38:	f7ff fffe 	bl	0 <printPuppet>			38: R_ARM_THM_CALL	sendCode	sendCode(nData,0x04);  3c:	2001      	movs	r0, #1  3e:	2104      	movs	r1, #4  40:	f7ff fffe 	bl	0 <printPuppet>			40: R_ARM_THM_CALL	sendCode	sendCode(nIns,0x44);  44:	2000      	movs	r0, #0  46:	2144      	movs	r1, #68	; 0x44  48:	f7ff fffe 	bl	0 <printPuppet>			48: R_ARM_THM_CALL	sendCode	sendCode(nData,0x1f);  4c:	2001      	movs	r0, #1  4e:	211f      	movs	r1, #31  50:	f7ff fffe 	bl	0 <printPuppet>			50: R_ARM_THM_CALL	sendCode	sendCode(nIns,0x45);  54:	2000      	movs	r0, #0  56:	2145      	movs	r1, #69	; 0x45  58:	f7ff fffe 	bl	0 <printPuppet>			58: R_ARM_THM_CALL	sendCode	sendCode(nData,0x04);  5c:	2001      	movs	r0, #1  5e:	2104      	movs	r1, #4  60:	f7ff fffe 	bl	0 <printPuppet>			60: R_ARM_THM_CALL	sendCode	sendCode(nIns,0x46);  64:	2000      	movs	r0, #0  66:	2146      	movs	r1, #70	; 0x46  68:	f7ff fffe 	bl	0 <printPuppet>			68: R_ARM_THM_CALL	sendCode	sendCode(nData,0x0A);  6c:	2001      	movs	r0, #1  6e:	210a      	movs	r1, #10  70:	f7ff fffe 	bl	0 <printPuppet>			70: R_ARM_THM_CALL	sendCode	sendCode(nIns,0x47);  74:	2000      	movs	r0, #0  76:	2147      	movs	r1, #71	; 0x47  78:	f7ff fffe 	bl	0 <printPuppet>			78: R_ARM_THM_CALL	sendCode	sendCode(nData,0x11);  7c:	2001      	movs	r0, #1  7e:	2111      	movs	r1, #17  80:	f7ff fffe 	bl	0 <printPuppet>			80: R_ARM_THM_CALL	sendCode	}  84:	46bd      	mov	sp, r7  86:	bd80      	pop	{r7, pc}Disassembly of section .text.printText:00000000 <printText>:void printText(int Coord, char* Array){   0:	b580      	push	{r7, lr}   2:	b084      	sub	sp, #16   4:	af00      	add	r7, sp, #0   6:	6078      	str	r0, [r7, #4]   8:	6039      	str	r1, [r7, #0]	sendCode(nIns, Coord);   a:	687b      	ldr	r3, [r7, #4]   c:	2000      	movs	r0, #0   e:	1c19      	adds	r1, r3, #0  10:	f7ff fffe 	bl	0 <printText>			10: R_ARM_THM_CALL	sendCode	int x,length;		for(x = 0; Array[x]!=0l; x++){  14:	2300      	movs	r3, #0  16:	60fb      	str	r3, [r7, #12]  18:	e00c      	b.n	34 <printText+0x34>			length=x;  1a:	68fb      	ldr	r3, [r7, #12]  1c:	60bb      	str	r3, [r7, #8]			sendCode(nData, Array[x]);  1e:	68fb      	ldr	r3, [r7, #12]  20:	683a      	ldr	r2, [r7, #0]  22:	18d3      	adds	r3, r2, r3  24:	781b      	ldrb	r3, [r3, #0]  26:	2001      	movs	r0, #1  28:	1c19      	adds	r1, r3, #0  2a:	f7ff fffe 	bl	0 <printText>			2a: R_ARM_THM_CALL	sendCode}void printText(int Coord, char* Array){	sendCode(nIns, Coord);	int x,length;		for(x = 0; Array[x]!=0l; x++){  2e:	68fb      	ldr	r3, [r7, #12]  30:	3301      	adds	r3, #1  32:	60fb      	str	r3, [r7, #12]  34:	68fb      	ldr	r3, [r7, #12]  36:	683a      	ldr	r2, [r7, #0]  38:	18d3      	adds	r3, r2, r3  3a:	781b      	ldrb	r3, [r3, #0]  3c:	2b00      	cmp	r3, #0  3e:	d1ec      	bne.n	1a <printText+0x1a>			length=x;			sendCode(nData, Array[x]);		}	}  40:	46bd      	mov	sp, r7  42:	b004      	add	sp, #16  44:	bd80      	pop	{r7, pc}  46:	46c0      	nop			; (mov r8, r8)Disassembly of section .text.centerText:00000000 <centerText>:void centerText(int Row, char Text[]){   0:	b580      	push	{r7, lr}   2:	b086      	sub	sp, #24   4:	af00      	add	r7, sp, #0   6:	6078      	str	r0, [r7, #4]   8:	6039      	str	r1, [r7, #0]	int lon=0;   a:	2300      	movs	r3, #0   c:	617b      	str	r3, [r7, #20]	while(Text[lon]!=0l){   e:	e002      	b.n	16 <centerText+0x16>		lon++;  10:	697b      	ldr	r3, [r7, #20]  12:	3301      	adds	r3, #1  14:	617b      	str	r3, [r7, #20]		}	}void centerText(int Row, char Text[]){	int lon=0;	while(Text[lon]!=0l){  16:	697b      	ldr	r3, [r7, #20]  18:	683a      	ldr	r2, [r7, #0]  1a:	18d3      	adds	r3, r2, r3  1c:	781b      	ldrb	r3, [r3, #0]  1e:	2b00      	cmp	r3, #0  20:	d1f6      	bne.n	10 <centerText+0x10>		lon++;	}	lon=16-lon;  22:	697b      	ldr	r3, [r7, #20]  24:	2210      	movs	r2, #16  26:	1ad3      	subs	r3, r2, r3  28:	617b      	str	r3, [r7, #20]	int center = 5;  2a:	2305      	movs	r3, #5  2c:	613b      	str	r3, [r7, #16]	int coord = Row+center;  2e:	687a      	ldr	r2, [r7, #4]  30:	693b      	ldr	r3, [r7, #16]  32:	18d3      	adds	r3, r2, r3  34:	60fb      	str	r3, [r7, #12]	printText(coord,Text);  36:	68fa      	ldr	r2, [r7, #12]  38:	683b      	ldr	r3, [r7, #0]  3a:	1c10      	adds	r0, r2, #0  3c:	1c19      	adds	r1, r3, #0  3e:	f7ff fffe 	bl	0 <centerText>			3e: R_ARM_THM_CALL	printText	sendCode(nIns, Row);  42:	687b      	ldr	r3, [r7, #4]  44:	2000      	movs	r0, #0  46:	1c19      	adds	r1, r3, #0  48:	f7ff fffe 	bl	0 <centerText>			48: R_ARM_THM_CALL	sendCode}  4c:	46bd      	mov	sp, r7  4e:	b006      	add	sp, #24  50:	bd80      	pop	{r7, pc}  52:	46c0      	nop			; (mov r8, r8)Disassembly of section .text.sendCode:00000000 <sendCode>:void sendCode(int Code, int Data){   0:	b580      	push	{r7, lr}   2:	b082      	sub	sp, #8   4:	af00      	add	r7, sp, #0   6:	6078      	str	r0, [r7, #4]   8:	6039      	str	r1, [r7, #0]	//Assign a value to pin RS	/*HINT: When RS is 1, then the LCD receives a data	when RS is 0, then the LCD receives an instruction */		// Initialize RS and Enable with 0	RS_0;   a:	4b25      	ldr	r3, [pc, #148]	; (a0 <sendCode+0xa0>)   c:	4a24      	ldr	r2, [pc, #144]	; (a0 <sendCode+0xa0>)   e:	6811      	ldr	r1, [r2, #0]  10:	22fd      	movs	r2, #253	; 0xfd  12:	400a      	ands	r2, r1  14:	601a      	str	r2, [r3, #0]	Enable_0;  16:	4b22      	ldr	r3, [pc, #136]	; (a0 <sendCode+0xa0>)  18:	4a21      	ldr	r2, [pc, #132]	; (a0 <sendCode+0xa0>)  1a:	6811      	ldr	r1, [r2, #0]  1c:	22fe      	movs	r2, #254	; 0xfe  1e:	400a      	ands	r2, r1  20:	601a      	str	r2, [r3, #0]	//Assign the value we want to send to the LCD	PortLCD = Data;	  22:	4b20      	ldr	r3, [pc, #128]	; (a4 <sendCode+0xa4>)  24:	683a      	ldr	r2, [r7, #0]  26:	601a      	str	r2, [r3, #0]		//We make the algorithm to establish if its an instruction we start with 0 on RS value, otherwise if its a data command we start with RS as 1;	if (Code == nIns)  28:	687b      	ldr	r3, [r7, #4]  2a:	2b00      	cmp	r3, #0  2c:	d116      	bne.n	5c <sendCode+0x5c>	{		Enable_1;  2e:	4b1c      	ldr	r3, [pc, #112]	; (a0 <sendCode+0xa0>)  30:	4a1b      	ldr	r2, [pc, #108]	; (a0 <sendCode+0xa0>)  32:	6812      	ldr	r2, [r2, #0]  34:	2101      	movs	r1, #1  36:	430a      	orrs	r2, r1  38:	601a      	str	r2, [r3, #0]		delay(nt40_usec);  3a:	4b1b      	ldr	r3, [pc, #108]	; (a8 <sendCode+0xa8>)  3c:	1c18      	adds	r0, r3, #0  3e:	f7ff fffe 	bl	0 <sendCode>			3e: R_ARM_THM_CALL	delay		Enable_0;  42:	4b17      	ldr	r3, [pc, #92]	; (a0 <sendCode+0xa0>)  44:	4a16      	ldr	r2, [pc, #88]	; (a0 <sendCode+0xa0>)  46:	6811      	ldr	r1, [r2, #0]  48:	22fe      	movs	r2, #254	; 0xfe  4a:	400a      	ands	r2, r1  4c:	601a      	str	r2, [r3, #0]		RS_0;  4e:	4b14      	ldr	r3, [pc, #80]	; (a0 <sendCode+0xa0>)  50:	4a13      	ldr	r2, [pc, #76]	; (a0 <sendCode+0xa0>)  52:	6811      	ldr	r1, [r2, #0]  54:	22fd      	movs	r2, #253	; 0xfd  56:	400a      	ands	r2, r1  58:	601a      	str	r2, [r3, #0]  5a:	e01e      	b.n	9a <sendCode+0x9a>	}			else if(Code == nData)  5c:	687b      	ldr	r3, [r7, #4]  5e:	2b01      	cmp	r3, #1  60:	d11b      	bne.n	9a <sendCode+0x9a>	{		RS_1;  62:	4b0f      	ldr	r3, [pc, #60]	; (a0 <sendCode+0xa0>)  64:	4a0e      	ldr	r2, [pc, #56]	; (a0 <sendCode+0xa0>)  66:	6812      	ldr	r2, [r2, #0]  68:	2102      	movs	r1, #2  6a:	430a      	orrs	r2, r1  6c:	601a      	str	r2, [r3, #0]		Enable_1;  6e:	4b0c      	ldr	r3, [pc, #48]	; (a0 <sendCode+0xa0>)  70:	4a0b      	ldr	r2, [pc, #44]	; (a0 <sendCode+0xa0>)  72:	6812      	ldr	r2, [r2, #0]  74:	2101      	movs	r1, #1  76:	430a      	orrs	r2, r1  78:	601a      	str	r2, [r3, #0]		delay(nt15_msec);  7a:	4b0c      	ldr	r3, [pc, #48]	; (ac <sendCode+0xac>)  7c:	1c18      	adds	r0, r3, #0  7e:	f7ff fffe 	bl	0 <sendCode>			7e: R_ARM_THM_CALL	delay		Enable_0;  82:	4b07      	ldr	r3, [pc, #28]	; (a0 <sendCode+0xa0>)  84:	4a06      	ldr	r2, [pc, #24]	; (a0 <sendCode+0xa0>)  86:	6811      	ldr	r1, [r2, #0]  88:	22fe      	movs	r2, #254	; 0xfe  8a:	400a      	ands	r2, r1  8c:	601a      	str	r2, [r3, #0]		RS_0;  8e:	4b04      	ldr	r3, [pc, #16]	; (a0 <sendCode+0xa0>)  90:	4a03      	ldr	r2, [pc, #12]	; (a0 <sendCode+0xa0>)  92:	6811      	ldr	r1, [r2, #0]  94:	22fd      	movs	r2, #253	; 0xfd  96:	400a      	ands	r2, r1  98:	601a      	str	r2, [r3, #0]	}}  9a:	46bd      	mov	sp, r7  9c:	b002      	add	sp, #8  9e:	bd80      	pop	{r7, pc}  a0:	400ff040 	.word	0x400ff040  a4:	400ff080 	.word	0x400ff080  a8:	00000dac 	.word	0x00000dac  ac:	00002710 	.word	0x00002710Disassembly of section .text.delay:00000000 <delay>:void delay(long time){   0:	b580      	push	{r7, lr}   2:	b082      	sub	sp, #8   4:	af00      	add	r7, sp, #0   6:	6078      	str	r0, [r7, #4]	while (time > 0)   8:	e002      	b.n	10 <delay+0x10>	{		time--;   a:	687b      	ldr	r3, [r7, #4]   c:	3b01      	subs	r3, #1   e:	607b      	str	r3, [r7, #4]		RS_0;	}}void delay(long time){	while (time > 0)  10:	687b      	ldr	r3, [r7, #4]  12:	2b00      	cmp	r3, #0  14:	dcf9      	bgt.n	a <delay+0xa>	{		time--;	}}    16:	46bd      	mov	sp, r7  18:	b002      	add	sp, #8  1a:	bd80      	pop	{r7, pc}